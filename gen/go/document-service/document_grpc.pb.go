// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: document-service/document.proto

package document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Document_CreateHistoryRecord_FullMethodName          = "/document.Document/CreateHistoryRecord"
	Document_GetHistoryRecordsByPacientId_FullMethodName = "/document.Document/GetHistoryRecordsByPacientId"
	Document_GetHistoryRecordById_FullMethodName         = "/document.Document/GetHistoryRecordById"
	Document_UpdateHistoryRecord_FullMethodName          = "/document.Document/UpdateHistoryRecord"
)

// DocumentClient is the client API for Document service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentClient interface {
	CreateHistoryRecord(ctx context.Context, in *CreateHistoryRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetHistoryRecordsByPacientId(ctx context.Context, in *GetHistoryRecordsByPacientIdRequest, opts ...grpc.CallOption) (*GetHistoryRecordsByPacientIdResponse, error)
	GetHistoryRecordById(ctx context.Context, in *GetHistoryRecordByIdRequest, opts ...grpc.CallOption) (*GetHistoryRecordByIdResponse, error)
	UpdateHistoryRecord(ctx context.Context, in *UpdateHistoryRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type documentClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentClient(cc grpc.ClientConnInterface) DocumentClient {
	return &documentClient{cc}
}

func (c *documentClient) CreateHistoryRecord(ctx context.Context, in *CreateHistoryRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Document_CreateHistoryRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) GetHistoryRecordsByPacientId(ctx context.Context, in *GetHistoryRecordsByPacientIdRequest, opts ...grpc.CallOption) (*GetHistoryRecordsByPacientIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryRecordsByPacientIdResponse)
	err := c.cc.Invoke(ctx, Document_GetHistoryRecordsByPacientId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) GetHistoryRecordById(ctx context.Context, in *GetHistoryRecordByIdRequest, opts ...grpc.CallOption) (*GetHistoryRecordByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryRecordByIdResponse)
	err := c.cc.Invoke(ctx, Document_GetHistoryRecordById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentClient) UpdateHistoryRecord(ctx context.Context, in *UpdateHistoryRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Document_UpdateHistoryRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServer is the server API for Document service.
// All implementations must embed UnimplementedDocumentServer
// for forward compatibility.
type DocumentServer interface {
	CreateHistoryRecord(context.Context, *CreateHistoryRecordRequest) (*emptypb.Empty, error)
	GetHistoryRecordsByPacientId(context.Context, *GetHistoryRecordsByPacientIdRequest) (*GetHistoryRecordsByPacientIdResponse, error)
	GetHistoryRecordById(context.Context, *GetHistoryRecordByIdRequest) (*GetHistoryRecordByIdResponse, error)
	UpdateHistoryRecord(context.Context, *UpdateHistoryRecordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDocumentServer()
}

// UnimplementedDocumentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentServer struct{}

func (UnimplementedDocumentServer) CreateHistoryRecord(context.Context, *CreateHistoryRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHistoryRecord not implemented")
}
func (UnimplementedDocumentServer) GetHistoryRecordsByPacientId(context.Context, *GetHistoryRecordsByPacientIdRequest) (*GetHistoryRecordsByPacientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryRecordsByPacientId not implemented")
}
func (UnimplementedDocumentServer) GetHistoryRecordById(context.Context, *GetHistoryRecordByIdRequest) (*GetHistoryRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryRecordById not implemented")
}
func (UnimplementedDocumentServer) UpdateHistoryRecord(context.Context, *UpdateHistoryRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHistoryRecord not implemented")
}
func (UnimplementedDocumentServer) mustEmbedUnimplementedDocumentServer() {}
func (UnimplementedDocumentServer) testEmbeddedByValue()                  {}

// UnsafeDocumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServer will
// result in compilation errors.
type UnsafeDocumentServer interface {
	mustEmbedUnimplementedDocumentServer()
}

func RegisterDocumentServer(s grpc.ServiceRegistrar, srv DocumentServer) {
	// If the following call pancis, it indicates UnimplementedDocumentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Document_ServiceDesc, srv)
}

func _Document_CreateHistoryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHistoryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).CreateHistoryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_CreateHistoryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).CreateHistoryRecord(ctx, req.(*CreateHistoryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_GetHistoryRecordsByPacientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRecordsByPacientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetHistoryRecordsByPacientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_GetHistoryRecordsByPacientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetHistoryRecordsByPacientId(ctx, req.(*GetHistoryRecordsByPacientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_GetHistoryRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).GetHistoryRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_GetHistoryRecordById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).GetHistoryRecordById(ctx, req.(*GetHistoryRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Document_UpdateHistoryRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHistoryRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServer).UpdateHistoryRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Document_UpdateHistoryRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServer).UpdateHistoryRecord(ctx, req.(*UpdateHistoryRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Document_ServiceDesc is the grpc.ServiceDesc for Document service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Document_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document.Document",
	HandlerType: (*DocumentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHistoryRecord",
			Handler:    _Document_CreateHistoryRecord_Handler,
		},
		{
			MethodName: "GetHistoryRecordsByPacientId",
			Handler:    _Document_GetHistoryRecordsByPacientId_Handler,
		},
		{
			MethodName: "GetHistoryRecordById",
			Handler:    _Document_GetHistoryRecordById_Handler,
		},
		{
			MethodName: "UpdateHistoryRecord",
			Handler:    _Document_UpdateHistoryRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "document-service/document.proto",
}
